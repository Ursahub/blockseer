import argparse
from blockseer.predictor import predict_inclusion_probability

def main():
    parser = argparse.ArgumentParser(description="üîÆ Blockseer ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    parser.add_argument("--fee-rate", type=int, required=True, help="–ö–æ–º–∏—Å—Å–∏—è –≤ —Å–∞—Ç/–±–∞–π—Ç")
    parser.add_argument("--blocks", type=int, default=3, help="–ß–∏—Å–ª–æ –±—É–¥—É—â–∏—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)")

    args = parser.parse_args()
    fee_rate = args.fee_rate
    blocks = args.blocks

    try:
        probability, position, capacity = predict_inclusion_probability(fee_rate, blocks)
        print(f"\nüì¨ –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏ {fee_rate} —Å–∞—Ç/–±–∞–π—Ç:")
        print(f"üî∏ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ {blocks} –±–ª–æ–∫(–∞/–æ–≤): {probability}%")
        if position:
            print(f"üî∏ –ü–æ–∑–∏—Ü–∏—è –≤ –º–µ–º–ø—É–ª–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ): {position} vbytes")
            print(f"üî∏ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: ~{(blocks * 10)}-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
        else:
            print("‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è ‚Äî —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
